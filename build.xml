<project name="Project: Red" basedir="../" default="test">
	<property environment="env" />
	<property file="buildspecs.properties" prefix="buildspecs" />


	<property name="mod.version" value="4.0.0" />
	<condition property="mod.build" value="${env.BUILD_NUMBER}" else="${buildspecs.build_number}">
		<isset property="env.BUILD_NUMBER" />
	</condition>
	<property name="mc.version" value="1.6.2" />
	<property name="forge.version" value="9.10.1.849" />
	<property name="ccl.version" value="1.0.0.28" />
	<property name="ccc.version" value="0.9.0.5_d1" />
	<property name="fmp.version" value="1.0.0.157" />
	<property name="nei.version" value="1.6.1.3_d1" />

	<property name="src.dir" value="ProjectRed" />
	<property name="build.dir" value="build" />
	<property name="download.dir" value="download" />
	<property name="jar.dir" value="dist/${mc.version}/${mod.version}-${mod.build}" />
	<property name="forge.dir" value="${build.dir}/forge" />
	<property name="fmp.dir" value="${build.dir}/fmp" />
	<property name="mcp.dir" value="${forge.dir}/mcp" />


	<property name="mod.name.base" value="ProjectRedBase-${mc.version}-${mod.version}.${mod.build}.jar" />
	<property name="mod.name.integration" value="ProjectRedIntegration-${mc.version}-${mod.version}.${mod.build}.jar" />
	<property name="mod.name.mechanical" value="ProjectRedMechanical-${mc.version}-${mod.version}.${mod.build}.jar" />
	<property name="mod.name.world" value="ProjectRedWorld-${mc.version}-${mod.version}.${mod.build}.jar" />

	<property name="forge.name" value="minecraftforge-src-${mc.version}-${forge.version}.zip" />
	<property name="ccl.name" value="CodeChickenLib-dev-${mc.version}-${ccl.version}.jar" />
	<property name="ccc.name" value="CodeChickenCore-dev%20${ccc.version}.jar" />
	<property name="fmp.name" value="ForgeMultipart-dev-${mc.version}-${fmp.version}.jar" />
	<property name="nei.name" value="NotEnoughItems-dev%20${nei.version}.jar" />


	<!-- Check downloaded dependencies -->
	<available property="forge-downloaded" file="${download.dir}/${forge.name}" />
	<available property="ccl-downloaded" file="${download.dir}/${ccl.name}" />
	<available property="ccc-downloaded" file="${download.dir}/${ccc.name}" />
	<available property="fmp-downloaded" file="${download.dir}/${fmp.name}" />
	<available property="nei-downloaded" file="${download.dir}/${nei.name}" />


	<!-- Check installed dependencies -->
	<property name="build.dependencies.file" value="${build.dir}/dependencies.properties" />
	<property prefix="build.dependencies" file="${build.dependencies.file}" />
	<condition property="forge-installed">
		<equals arg1="${build.dependencies.forge}" arg2="${forge.version}" />
	</condition>
	<condition property="ccl-installed">
		<and>
			<isset property="forge-installed" />
			<equals arg1="${build.dependencies.ccl}" arg2="${ccl.version}" />
		</and>
	</condition>
	<condition property="ccc-installed">
		<and>
			<isset property="forge-installed" />
			<equals arg1="${build.dependencies.ccc}" arg2="${ccc.version}" />
		</and>
	</condition>
	<condition property="fmp-installed">
		<and>
			<isset property="forge-installed" />
			<equals arg1="${build.dependencies.fmp}" arg2="${fmp.version}" />
		</and>
	</condition>
	<condition property="nei-installed">
		<and>
			<isset property="forge-installed" />
			<equals arg1="${build.dependencies.nei}" arg2="${nei.version}" />
		</and>
	</condition>

	<condition property="runnung-in-ci">
		<isset property="env.TRAVIS" />
	</condition>


	<!-- Make directories -->
	<mkdir dir="${build.dir}" />
	<mkdir dir="${download.dir}" />
	<mkdir dir="${jar.dir}" />


	<!-- Targets for downloading dependencies -->
	<target name="download-forge" unless="forge-downloaded">
		<get src="http://files.minecraftforge.net/${forge.name}" dest="${download.dir}" usetimestamp="true" />
	</target>

	<target name="download-ccl" unless="ccl-downloaded">
		<get src="http://files.minecraftforge.net/CodeChickenLib/${ccl.name}" dest="${download.dir}" usetimestamp="true" />
	</target>

	<target name="download-ccc" unless="ccc-downloaded">
		<get src="http://www.chickenbones.craftsaddle.org/Files/New_Versions/${mc.version}/${ccc.name}" dest="${download.dir}" usetimestamp="true" />
	</target>

	<target name="download-fmp" unless="fmp-downloaded">
		<get src="http://files.minecraftforge.net/ForgeMultipart/${fmp.name}" dest="${download.dir}" usetimestamp="true" />
	</target>

	<target name="download-nei" unless="nei-downloaded">
		<get src="http://www.chickenbones.craftsaddle.org/Files/New_Versions/${mc.version}/${nei.name}" dest="${download.dir}" usetimestamp="true" />
	</target>


	<!-- Targets for installing dependencies -->
	<target name="install-forge" depends="download-forge" unless="forge-installed">
		<echo message="Deleteing old Forge" />
		<delete dir="${forge.dir}" />

		<condition property="installargs" value=" --no-assets" else="">
			<or>
				<isset property="env.TRAVIS" />
				<isset property="env.BUILD_ID" />
			</or>
		</condition>

		<echo message="Installing Forge with args '${installargs}'." />
		<unzip src="${download.dir}/${forge.name}" dest="${forge.dir}/.." />
		<property name="fml.python.exe" location="${forge.dir}/fml/python/python_fml.exe" />
		<exec dir="${forge.dir}" executable="${fml.python.exe}" osfamily="windows" failonerror="true">
			<arg line="install.py${installargs}" />
		</exec>
		<exec dir="${forge.dir}" executable="python" osfamily="unix" failonerror="true">
			<arg line="install.py${installargs}" />
		</exec>

		<echo message="Updating build.dependencies" />
		<delete file="${build.dependencies.file}" />
		<propertyfile file="${build.dependencies.file}">
			<entry key="forge" value="${forge.version}" />
		</propertyfile>
	</target>

	<target name="install-ccl" depends="install-forge,download-ccl" unless="ccl-installed">
		<echo message="Deleting old CodeChickenLib" />
		<delete file="${mcp.dir}/lib/${build.dependencies.ccl.name}" />

		<echo message="Installing CodeChickenLib" />
		<copy file="${download.dir}/${ccl.name}" todir="${mcp.dir}/lib" />

		<echo message="Updating build.dependencies" />
		<propertyfile file="${build.dependencies.file}">
			<entry key="ccl" value="${ccl.version}" />
			<entry key="ccl.name" value="${ccl.name}" />
		</propertyfile>
	</target>

	<target name="install-ccc" depends="install-forge,download-ccc" unless="ccc-installed">
		<echo message="Deleting old CodeChickenCore" />
		<delete file="${mcp.dir}/lib/${build.dependencies.ccc.name}" />

		<echo message="Installing CodeChickenCore" />
		<copy file="${download.dir}/${ccc.name}" todir="${mcp.dir}/lib" />

		<echo message="Updating build.dependencies" />
		<propertyfile file="${build.dependencies.file}">
			<entry key="ccc" value="${ccc.version}" />
			<entry key="ccc.name" value="${ccc.name}" />
		</propertyfile>
	</target>

	<target name="install-fmp" depends="install-forge,download-fmp" unless="fmp-installed">
		<echo message="Deleting old ForgeMultipart" />
		<delete file="${mcp.dir}/lib/${build.dependencies.fmp.name}" />
		<delete dir="${fmp.dir}" />

		<echo message="Installing ForgeMultipart" />
		<copy file="${download.dir}/${fmp.name}" todir="${mcp.dir}/lib" />
		<unzip src="${download.dir}/${fmp.name}" dest="${fmp.dir}">
			<patternset>
				<include name="**/*.class" />
			</patternset>
		</unzip>

		<echo message="Updating build.dependencies" />
		<propertyfile file="${build.dependencies.file}">
			<entry key="fmp" value="${fmp.version}" />
			<entry key="fmp.name" value="${fmp.name}" />
		</propertyfile>
	</target>

	<target name="install-nei" depends="install-forge,download-nei" unless="nei-installed">
		<echo message="Deleting old NotEnoughItems" />
		<delete file="${mcp.dir}/lib/${build.dependencies.nei.name}" />

		<echo message="Installing NotEnoughItems" />
		<copy file="${download.dir}/${nei.name}" todir="${mcp.dir}/lib" />

		<echo message="Updating build.dependencies" />
		<propertyfile file="${build.dependencies.file}">
			<entry key="nei" value="${nei.version}" />
			<entry key="nei.name" value="${nei.name}" />
		</propertyfile>
	</target>

	<target name="install-dependencies" depends="install-forge,install-ccl,install-ccc,install-fmp,install-nei" />

	<!-- Targets for building -->
	<target name="recompile">

		<!-- Copy PR source -->
		<echo message="Copying source" />
		<copy todir="${mcp.dir}/src/minecraft">
			<fileset dir="${src.dir}/common" />
		</copy>
		<copy todir="${mcp.dir}/reobf/resources">
			<fileset dir="${src.dir}/resources" />
		</copy>

		<!-- Replace Tokens-->
		<replace dir="${mcp.dir}/src/minecraft/mrtjp/projectred" token="@VERSION@" value="${mod.version}" />
		<replace dir="${mcp.dir}/src/minecraft/mrtjp/projectred" token="@BUILD_NUMBER@" value="${mod.build}" />
		<replace dir="${mcp.dir}/src/minecraft/mrtjp/projectred" token="@MC_VERSION@" value="${mc.version}" />

		<replace dir="${mcp.dir}/reobf/resources" token="@VERSION@" value="${mod.version}" />
		<replace dir="${mcp.dir}/reobf/resources" token="@BUILD_NUMBER@" value="${mod.build}" />
		<replace dir="${mcp.dir}/reobf/resources" token="@MC_VERSION@" value="${mc.version}" />
		<replace dir="${mcp.dir}/reobf/resources" token="@FORGE_VERSION@" value="${version.forge}" />
		<replace dir="${mcp.dir}/reobf/resources" token="@TEST_MSG@" value="..." />


		<echo message="Recompiling" />
		<property name="mcp.python.exe" location="${mcp.dir}/runtime/bin/python/python_mcp.exe" />
		<exec dir="${mcp.dir}" executable="${mcp.python.exe}" osfamily="windows" resultproperty="recompile.code">
			<arg line="runtime/recompile.py" />
		</exec>
		<exec dir="${mcp.dir}" executable="python" osfamily="unix" resultproperty="recompile.code">
			<arg line="runtime/recompile.py" />
		</exec>

		<echo message="Removing source" />
		<delete includeemptydirs="true">
			<fileset dir="${mcp.dir}/src/minecraft">
				<present present="both" targetdir="${src.dir}/common" />
			</fileset>
		</delete>

		<fail message="Failed to recompile">
			<condition>
				<isfailure code="${recompile.code}" />
			</condition>
		</fail>
	</target>

	<target name="reobfuscate">
		<echo message="Copying ForgeMultipart" />
		<copy todir="${mcp.dir}/bin/minecraft">
			<fileset dir="${fmp.dir}" />
		</copy>

		<echo message="Reobfuscating" />
		<property name="mcp.python.exe" location="${mcp.dir}/runtime/bin/python/python_mcp.exe" />
		<exec dir="${mcp.dir}" executable="${mcp.python.exe}" osfamily="windows" resultproperty="reobfuscate.code">
			<arg line="runtime/reobfuscate.py --srgnames" />
		</exec>
		<exec dir="${mcp.dir}" executable="python" osfamily="unix" resultproperty="reobfuscate.code">
			<arg line="runtime/reobfuscate.py --srgnames" />
		</exec>

		<echo message="Removing ForgeMultipart" />
		<delete includeemptydirs="true">
			<fileset dir="${mcp.dir}/bin/minecraft">
				<present present="both" targetdir="${fmp.dir}" />
			</fileset>
			<fileset dir="${mcp.dir}/reobf/minecraft">
				<present present="both" targetdir="${fmp.dir}" />
			</fileset>
		</delete>

		<fail message="Failed to reobfuscate">
			<condition>
				<isfailure code="${reobfuscate.code}" />
			</condition>
		</fail>
	</target>

	<target name="package">
		<echo message="Building Jar" />
		<mkdir dir="${jar.dir}" />

		<!-- ProjectRed Base -->
		<echo message="Packaging ProjectRed Base" />
		<jar destfile="${jar.dir}/${mod.name.base}">
			<fileset dir="${mcp.dir}/reobf/minecraft" includes="**/ProjectRedCore*.class, **/mrtjp/projectred/core/**, **/mrtjp/projectred/api/**" />
			<fileset dir="${mcp.dir}/reobf/resources">
			</fileset>
		</jar>

		<!-- ProjectRed Integration -->
		<echo message="Packaging ProjectRed Integration" />
		<jar destfile="${jar.dir}/${mod.name.integration}">
			<fileset dir="${mcp.dir}/reobf/minecraft" includes="**/ProjectRedIntegration*.class, **/ProjectRedTransmission*.class, **/mrtjp/projectred/integration/**, **/mrtjp/projectred/transmission/**" />
		</jar>

		<!-- ProjectRed Mechanical -->
		<echo message="Packaging ProjectRed Mechanical" />
		<jar destfile="${jar.dir}/${mod.name.mechanical}">
			<fileset dir="${mcp.dir}/reobf/minecraft" includes="**/ProjectRedExpansion*.class, **/mrtjp/projectred/expansion/**" />
		</jar>

		<!-- ProjectRed World -->
		<echo message="Packaging ProjectRed World" />
		<jar destfile="${jar.dir}/${mod.name.world}">
			<fileset dir="${mcp.dir}/reobf/minecraft" includes="**/ProjectRedExploration*.class, **/ProjectRedIllumination*.class, **/mrtjp/projectred/exploration/**, **/mrtjp/projectred/illumination/**" />
		</jar>

	</target>

	<target name="test">
		<antcall target="install-dependencies" />
		<antcall target="recompile" />
		<antcall target="reobfuscate" />
		<antcall target="package" />
	</target>

</project>