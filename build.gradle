buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url = "https://files.minecraftforge.net/maven/" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:4.1.+'
    }
}

plugins {
    id 'java'
    id 'scala'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id "net.covers1624.signing" version '1.1.3'
}

apply plugin: 'net.minecraftforge.gradle'

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

group = "mrtjp"
archivesBaseName = "ProjectRed"

sourceSets {
    core
    expansion
    exploration
    illumination
    integration
    transmission
}

sourceSets.each {
    it.resources.srcDirs += "src/${it.name}/generated"
}

file('build.properties').withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

def build_number = project.hasProperty("manualbuildnum") ? project.manualbuildnum : (Integer.parseInt(System.getenv("BUILD_NUMBER") ?: "1")).toString()
config.mod_version = "${config.mod_version}." + build_number
version = "${config.mc_version}-${config.mod_version}"
println "Starting build of ${archivesBaseName}, Version: ${config.mod_version}"
println "Using Forge: ${config.forge_version}, for Minecraft: ${config.mc_version}, with Mappings: ${config.mappings}"

minecraft {
    mappings channel: 'snapshot', version: config.mappings
    accessTransformer = file("src/core/resources/META-INF/accesstransformer.cfg")
    runs {
        client {
            workingDirectory file('run')
            mods {
                'projectred-core' { source sourceSets.core }
                'projectred-expansion' { source sourceSets.expansion }
                'projectred-exploration' { source sourceSets.exploration }
                'projectred-illumination' { source sourceSets.illumination }
                'projectred-integration' { source sourceSets.integration }
                'projectred-transmission' { source sourceSets.transmission }
            }
        }
        server {
            workingDirectory file('run')
            mods {
                'projectred-core' { source sourceSets.core }
                'projectred-expansion' { source sourceSets.expansion }
                'projectred-exploration' { source sourceSets.exploration }
                'projectred-illumination' { source sourceSets.illumination }
                'projectred-integration' { source sourceSets.integration }
                'projectred-transmission' { source sourceSets.transmission }
            }
        }

        sourceSets.each {
            "${it.name}Data" {
                workingDirectory file('run')
                args '--mod', "projectred-${it.name}".toString(), '--all', '--output', file("src/${it.name}/generated"), '--existing', file("src/${it.name}/resources")
                mods {
                    'projectred-core' { source sourceSets.core }
                    'projectred-expansion' { source sourceSets.expansion }
                    'projectred-exploration' { source sourceSets.exploration }
                    'projectred-illumination' { source sourceSets.illumination }
                    'projectred-integration' { source sourceSets.integration }
                    'projectred-transmission' { source sourceSets.transmission }
                }
            }
        }
    }
}

repositories {
    mavenCentral()
    mavenLocal()
    maven { url "http://chickenbones.net/maven/" }
    maven { url "http://dvs1.progwml6.com/files/maven/" }
}

configurations {
    coreCompile.extendsFrom compile

    moduleCompile.extendsFrom coreCompile

    expansionCompile.extendsFrom moduleCompile
    explorationCompile.extendsFrom moduleCompile
    illuminationCompile.extendsFrom moduleCompile
    integrationCompile.extendsFrom moduleCompile
    transmissionCompile.extendsFrom moduleCompile
}

dependencies {
    minecraft "net.minecraftforge:forge:${config.mc_version}-${config.forge_version}"

    compile "org.scala-lang:scala-compiler:${config.scala_version}"
    compile "org.scala-lang:scala-library:${config.scala_version}"
    compile "org.scala-lang.modules:scala-java8-compat_${config.scala_compat_version}"
    compile "net.minecraftforge:Scorge:${config.scorge_version}"

    // PR Core deps
    coreCompile "codechicken:CodeChickenLib:${config.mc_version}-${config.ccl_version}:deobf"
    coreCompile "codechicken:CBMultipart:${config.mc_version}-${config.cbm_version}:deobf"

    // Common deps for all PR modules
    moduleCompile sourceSets.core.output

    integrationCompile sourceSets.transmission.output //TODO remove this dep
    
    // compile against the JEI API but do not include it at runtime
    coreCompileOnly fg.deobf("mezz.jei:jei-${config.mc_version}:${config.jei_version}:api")
    // at runtime, use the full JEI jar
    coreRuntimeOnly fg.deobf("mezz.jei:jei-${config.mc_version}:${config.jei_version}")
}


jar.enabled = false //Disable main sourceset
reobf {
    jar { enabled = false } //Disable main sourceset
    coreJar {}
    expansionJar {}
    explorationJar {}
    illuminationJar {}
    integrationJar {}
    transmissionJar {}
}

task coreJar(type: Jar) {
    baseName 'ProjectRedCore'
    dependsOn compileCoreScala, compileCoreJava
    from sourceSets.core.output
}

task expansionJar(type: Jar) {
    baseName 'ProjectRedExpansion'
    dependsOn compileExpansionScala, compileExpansionJava
    from sourceSets.expansion.output
}

task explorationJar(type: Jar) {
    baseName 'ProjectRedExploration'
    dependsOn compileExplorationScala, compileExplorationJava
    from sourceSets.exploration.output
}

task illuminationJar(type: Jar) {
    baseName 'ProjectRedIllumination'
    dependsOn compileIlluminationScala, compileIlluminationJava
    from sourceSets.illumination.output
}

task integrationJar(type: Jar) {
    baseName 'ProjectRedIntegration'
    dependsOn compileIntegrationScala, compileIntegrationJava
    from sourceSets.integration.output
}

task transmissionJar(type: Jar) {
    baseName 'ProjectRedTransmission'
    dependsOn compileTransmissionScala, compileTransmissionJava
    from sourceSets.transmission.output
}

// processResources {
//     //redo task if any of these properties change
//     inputs.property "version", project.version
//     inputs.property "mc.version", config.mc_version
//
//     // Replace properties in all files
//     from(sourceSets.main.resources.srcDirs) {
//         include '**.info'
//         expand  'mod_version': version, 'mc_version': config.mc_version,
//                 'forge_version': config.forge_version,
//                 'tjcore_version': config.tjpcore_version.replace(".+", ""),
//                 'ccl_version': config.ccl_version.replace(".+", ""),
//                 'cbm_version': config.cbm_version.replace(".+", "")
//     }
//     // Copy everything else
//     from(sourceSets.main.resources.srcDirs) {
//         include 'assets/**/*.*'
//     }
// }



// jar {//Because groovy we need to define these first other wise our zipTree call will fail.
//     classifier = 'all'
//     version = "${config.mc_version}-${project.version}"
// }

// task srcJar(type: Jar) {
//     from sourceSets.main.allSource
//     classifier = 'sources'
//     version = "${config.mc_version}-${project.version}"
// }

// task deobfJar(type: Jar) {
//     from sourceSets.main.output
//     classifier = 'deobf'
//     version = "${config.mc_version}-${project.version}"
// }

// // Enable experimental features for scala compiler
// tasks.withType(ScalaCompile) {
//     scalaCompileOptions.additionalParameters = ["-Xexperimental"]
//     scalaCompileOptions.setDeprecation false
// }

// artifacts {
//     archives integrationJar
//     archives fabricationJar
//     archives lightingJar
//     archives mechanicalJar
//     archives worldJar
//     archives compatJar
//     archives baseJar

//     archives deobfJar
//     archives srcJar
// }

// uploadArchives {
//     repositories {
//         mavenDeployer {
//             if (project.hasProperty("local_maven")) {
//                 repository(url: "file://${local_maven}")
//                 pom {
//                     groupId = project.group
//                     version = "${config.mc_version}-${project.version}"
//                     artifactId = project.archivesBaseName
//                     project {
//                         name project.archivesBaseName
//                         packaging 'jar'
//                         description project.archivesBaseName
//                         url 'https://github.com/MrTJP/'+project.archivesBaseName

//                         scm {
//                             url 'https://github.com/MrTJP/'+project.archivesBaseName
//                             connection 'scm:git:git://github.com/MrTJP/'+project.archivesBaseName+'.git'
//                             developerConnection 'scm:git:git@github.com:MrTJP/'+project.archivesBaseName+'.git'
//                         }

//                         issueManagement {
//                             system 'github'
//                             url 'https://github.com/MrTJP/'+project.archivesBaseName+'/issues'
//                         }

//                         licenses {
//                             license {
//                                 name 'Restricted Public Software License (RPSL) v1.3.1'
//                                 url 'https://raw.githubusercontent.com/MrTJP/ProjectRed/master/LICENSE.md'
//                                 distribution 'repo'
//                             }
//                         }

//                         developers {
//                             developer {
//                                 id 'mrtjp'
//                                 name 'mrtjp'
//                                 roles { role 'developer' }
//                             }
//                         }
//                     }
//                 }
//             }
//         }
//     }
// }

/*if (project.hasProperty('curseapi')) {
    curse {
        doLast {
            curseIntegration.execute()
            curseFabrication.execute()
            curseLighting.execute()
            curseMechanical.execute()
            curseWorld.execute()
            curseCompat.execute()
        }
        projectId = '228702'
        artifact = baseJar

        additionalArtifact deobfJar
        additionalArtifact sourceJar
    }

    task curseIntegration(dependsOn: 'curse', type: CurseUploadTask) {
        projectId = '229045'
        artifact = integrationJar
    }

    task curseFabrication(dependsOn: 'curse', type: CurseUploadTask) {
        projectId = '230111'
        artifact = fabricationJar
        relatedProject 'project-red-integration': 'requiredLibrary'
    }

    task curseLighting(dependsOn: 'curse', type: CurseUploadTask) {
        projectId = '229046'
        artifact = lightingJar
    }

    task curseMechanical(dependsOn: 'curse', type: CurseUploadTask) {
        projectId = '229048'
        artifact = mechanicalJar
        relatedProject 'project-red-integration': 'requiredLibrary'
        relatedProject 'forge-relocation': 'requiredLibrary'
        relatedProject 'forge-relocation-fmp-plugin': 'requiredLibrary'
    }

    task curseWorld(dependsOn: 'curse', type: CurseUploadTask) {
        projectId = '229049'
        artifact = worldJar
    }

    task curseCompat(dependsOn: 'curse', type: CurseUploadTask) {
        projectId = '229050'
        artifact = compatJar
    }

    configure([curse, curseIntegration, curseFabrication, curseLighting, curseMechanical, curseWorld, curseCompat]) {
        apiKey = project.curseapi
        releaseType = 'release'
        relatedProject 'mrtjpcore': 'requiredLibrary'
        relatedProject 'forge-multi-part': 'requiredLibrary'
        addGameVersion project.minecraft.version
    }

    configure([curseIntegration, curseFabrication, curseLighting, curseMechanical, curseWorld, curseCompat]) {
        relatedProject 'project-red-base': 'requiredLibrary'
    }
}*/
